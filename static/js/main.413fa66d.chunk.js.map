{"version":3,"sources":["modules/tools/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Tools","useState","wait","setWait","canvasRef","useRef","videoRef","Image","crossOrigin","drawing","src","useEffect","navigator","mediaDevices","getUserMedia","video","then","stream","current","srcObject","catch","console","log","className","css","styles","wrapper","onClick","a","async","displaySize","width","height","faceapi","setInterval","withFaceLandmarks","fullFaceDescriptions","landmarks","leftEye","getLeftEye","rightEye","getRightEye","getContext","clearRect","leftPoint","rightPoint","ratio","x","drawImage","y","analize","container","autoPlay","ref","canvasContainer","StyleSheet","create","display","alignItems","justifyContent","flexDirection","position","top","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"kVASaA,EAAsB,WAAO,IAAD,EACfC,oBAAS,GADM,mBAChCC,EADgC,KAC1BC,EAD0B,KAEjCC,EAAYC,iBAAO,MACnBC,EAAWD,iBAAO,OACZ,IAAIE,OACZC,YAAc,YAElB,IAAMC,EAAU,IAAIF,MACpBE,EAAQC,IAZ+B,eAwEvC,OAXAC,qBAAU,WACRC,UAAUC,aACPC,aAAa,CAAEC,OAAO,IACtBC,MAAK,SAASC,GACZX,EAASY,QAAgBC,UAAYF,KAEvCG,OAAM,WACLC,QAAQC,IAAI,8BAKhB,yBAAKC,UAAWC,YAAIC,EAAOC,UACzB,4BAAQC,QAAS,kBA5DL,SAAOZ,EAAYX,GAAnB,eAAAwB,EAAAC,OAAA,uDACRC,EAAc,CAAEC,MAAOhB,EAAMgB,MAAOC,OAAQjB,EAAMiB,QAD1C,WAAAJ,EAAA,MAGRK,IAlBiC,YAezB,yBAAAL,EAAA,MAIRK,IAnBiC,YAezB,yBAAAL,EAAA,MAKRK,IApBiC,YAezB,OAMd9B,GAAQ,GACR8B,IAAwB7B,EAAUc,QAASY,GAC3CI,aAAY,0CAAAN,EAAAC,OAAA,kEAAAD,EAAA,MACyBK,IACflB,GACjBoB,qBAHO,UACJC,EADI,OAIJC,EAJI,OAIQD,QAJR,IAIQA,OAJR,EAIQA,EAAsBC,UAJ9B,oDASJC,EAAWD,EAAkBE,aAC7BC,EAAYH,EAAkBI,cAE/BL,EAZK,mDAeVhC,EAAUc,QACPwB,WAAW,MACXC,UAAU,EAAG,EAAGvC,EAAUc,QAAQa,MAAO3B,EAAUc,QAAQc,QAMxDY,EAAYN,EAAQ,GACpBO,EAAaL,EAAS,GAEtBM,EAAQrC,EAAQuB,OAASvB,EAAQsB,MAEjCA,EAAQc,EAAWE,EAAIH,EAAUG,EAAI,GACrCf,EAASD,EAAQe,EAEvBzB,QAAQC,IAAIS,EAAOC,GACnB7B,GAAQ,GACRC,EAAUc,QACPwB,WAAW,MACXM,UAAUvC,EAASmC,EAAUG,EAAI,GAAIH,EAAUK,EAAI,GAAIlB,EAAOC,GAnCvD,wCAoCT,KA5CW,sCA4DWkB,CAAQ5C,EAASY,QAASd,KAAjD,kFAGCF,GAAQ,oDACT,yBAAKqB,UAAWC,YAAIC,EAAO0B,YACzB,2BAAOC,UAAU,EAAMC,IAAK/C,EAAUyB,MAAO,IAAKC,OAAQ,MAC1D,4BACEqB,IAAKjD,EACL4B,OAAQ,IACRD,MAAO,IACPR,UAAWC,YAAIC,EAAO6B,sBAO1B7B,EAAS8B,IAAWC,OAAO,CAC/B9B,QAAS,CACPK,MAAO,OACP0B,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,cAAe,UAEjBN,gBAAiB,CACfG,QAAS,QACTI,SAAU,WACVC,IAAK,GAEPX,UAAW,CACTU,SAAU,cCjGCE,EARO,WACpB,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,QCIcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmB5D,WACrBA,UAAU6D,cAAcC,MAAM1D,MAAK,SAAA2D,GACjCA,EAAaC,kB","file":"static/js/main.413fa66d.chunk.js","sourcesContent":["import React, { FC, useRef, useCallback, useEffect, useState } from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport * as faceapi from \"face-api.js\";\n\nconst MODEL_URL = process.env.PUBLIC_URL + \"/models\";\nconst glasses = process.env.PUBLIC_URL + \"/glasses.png\";\n\ninterface OwnProps {}\n\nexport const Tools: FC<OwnProps> = () => {\n  const [wait, setWait] = useState(false);\n  const canvasRef = useRef(null);\n  const videoRef = useRef(null);\n  const img = new Image();\n  img.crossOrigin = \"anonymous\";\n\n  const drawing = new Image();\n  drawing.src = glasses;\n\n  const analize = async (video: any, canvasRef: any) => {\n    const displaySize = { width: video.width, height: video.height };\n\n    await faceapi.loadSsdMobilenetv1Model(MODEL_URL);\n    await faceapi.loadFaceLandmarkModel(MODEL_URL);\n    await faceapi.loadFaceRecognitionModel(MODEL_URL);\n    setWait(true);\n    faceapi.matchDimensions(canvasRef.current, displaySize);\n    setInterval(async () => {\n      const fullFaceDescriptions = await faceapi\n        .detectSingleFace(video)\n        .withFaceLandmarks();\n      const landmarks = fullFaceDescriptions?.landmarks;\n\n      if (!landmarks) {\n        return;\n      }\n      const leftEye = (landmarks as any).getLeftEye();\n      const rightEye = (landmarks as any).getRightEye();\n\n      if (!fullFaceDescriptions) {\n        return;\n      }\n      canvasRef.current\n        .getContext(\"2d\")\n        .clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      // faceapi.draw.drawFaceLandmarks(canvasRef.current, fullFaceDescriptions);\n\n      // faceapi.draw.drawContour(canvasRef.current.getContext(\"2d\"), leftEye);\n      // faceapi.draw.drawContour(canvasRef.current.getContext(\"2d\"), rightEye);\n\n      const leftPoint = leftEye[0];\n      const rightPoint = rightEye[3];\n\n      const ratio = drawing.height / drawing.width;\n\n      const width = rightPoint.x - leftPoint.x + 60;\n      const height = width * ratio;\n\n      console.log(width, height);\n      setWait(false);\n      canvasRef.current\n        .getContext(\"2d\")\n        .drawImage(drawing, leftPoint.x - 20, leftPoint.y - 40, width, height);\n    }, 100);\n  };\n\n  useEffect(() => {\n    navigator.mediaDevices\n      .getUserMedia({ video: true })\n      .then(function(stream) {\n        (videoRef.current as any).srcObject = stream;\n      })\n      .catch(function() {\n        console.log(\"Something was wrong!\");\n      });\n  });\n\n  return (\n    <div className={css(styles.wrapper)}>\n      <button onClick={() => analize(videoRef.current, canvasRef)}>\n        Анализировать\n      </button>\n      {wait && \"Ожидайте!\"}\n      <div className={css(styles.container)}>\n        <video autoPlay={true} ref={videoRef} width={640} height={480}></video>\n        <canvas\n          ref={canvasRef}\n          height={480}\n          width={640}\n          className={css(styles.canvasContainer)}\n        ></canvas>\n      </div>\n    </div>\n  );\n};\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"column\"\n  },\n  canvasContainer: {\n    display: \"block\",\n    position: \"absolute\",\n    top: 0\n  },\n  container: {\n    position: \"relative\"\n  }\n});\n","import React from \"react\";\nimport \"./App.css\";\nimport { Browser } from \"./modules/browser\";\nimport { Tools } from \"./modules/tools\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Tools />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}